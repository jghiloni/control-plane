---
resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: terraform-state
  type: s3
  source:
    bucket: ((terraform-s3-bucket))
    region_name: ((s3-region))
    access_key_id: ((s3-access-key))
    secret_access_key: ((s3-secret-key))
    versioned_file: ((environment))/terraform.tfstate

- name: terraforming-aws
  type: git
  source:
    uri: ((terraforming-aws-repo.uri))
    private_key: ((terraforming-aws-repo.private_key))

- name: platform-automation-image
  type: pivnet
  source:
    api_token: ((pivnet-api-token))
    product_slug: platform-automation
    sort_by: semver

- name: platform-automation-tasks
  type: pivnet
  source:
    api_token: ((pivnet-api-token))
    product_slug: platform-automation
    sort_by: semver

- name: ops-manager
  type: pivnet
  source:
    api_token: ((pivnet-api-token))
    product_slug: ops-manager
    product_version: 2\.5\.(.*)

- name: source
  type: git
  source: 
    uri: ((source-repo.uri))
    private_key: ((source-repo.private_key))
    branch: master

- name: jq
  check_every: 24h
  type: github-release
  source:
    owner: stedolan
    repository: jq

- name: terraform-release
  check_every: 24h
  type: github-release
  source:
    owner: hashicorp
    repository: terraform
    tag_filter: v(0\.11\..*)

jobs:
- name: init-infrastructure
  serial: true
  plan:
  - aggregate:
    - get: terraform-release
    - get: terraforming-aws
    - get: source
    - get: platform-automation-image
      params:
        globs: ['*.tgz']
        unpack: true
  - task: init-terraform
    image: platform-automation-image
    file: source/ci/tasks/init-terraform.yml
    params:
      TF_VAR_bucket: ((terraform-s3-bucket))
      TF_VAR_region: ((s3-region))
      TF_VAR_key: "((environment))/terraform.tfstate"
      TF_VAR_access_key: ((s3-access-key))
      TF_VAR_secret_key: ((s3-secret-key))
  - task: do-terraform
    image: platform-automation-image
    file: source/ci/tasks/do-terraform.yml
    params:
    #   TF_VAR_bucket: ((terraform-s3-bucket))
    #   TF_VAR_region: ((s3-region))
    #   TF_VAR_key: "((environment))/terraform.tfstate"
      TF_VAR_access_key: ((s3-access-key))
      TF_VAR_secret_key: ((s3-secret-key))
      TF_VAR_env_name: ((environment))
      TF_VAR_ssl_cert: ((pas-tls.certificate))
      TF_VAR_ssl_private_key: ((pas-tls.private_key))
- name: install-opsman
  serial: true
  plan:
  - aggregate:
    - get: terraform-state
    - get: source
    - get: platform-automation-image
      trigger: true
      passed: [init-infrastructure]
      params:
        globs: ['*.tgz']
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ['*.zip']
        unpack: true
    - get: jq
      params:
        globs: [jq-linux64]
    - get: ops-manager
      params:
        globs: ['ops-manager-aws-*.yml']
  - task: build-opsman-vars
    image: platform-automation-image
    file: source/ci/tasks/build-opsman-vars.yml
    params:
      ENV_NAME: ((environment))
      INSTANCE_PROFILE: jaygles-control_ops_manager
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      state: source
      config: source
      image: ops-manager
      vars: opsman-vars
    params:
      STATE_FILE: state/((environment))/state.yml
      VARS_FILES: vars/vars.yml
      OPSMAN_CONFIG_FILE: config/opsman.yml
    ensure:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: source
            file-source: generated-state
          output_mapping:
            repository-commit: source-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: state/((environment))/state.yml
            GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
            GIT_AUTHOR_NAME: "Platform Automation Bot"
            COMMIT_MESSAGE: 'Update state file'
        - put: source
          params:
            repository: source-commit
            merge: true
- name: configure-authentication
  serial: true
  plan:
  - aggregate:
    - get: source
    - get: platform-automation-image
      trigger: true
      passed: [install-opsman]
      params:
        globs: ['*.tgz']
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ['*.zip']
        unpack: true
  - task: build-authentication-file
    image: platform-automation-image
    file: source/ci/tasks/build-authentication-file.yml
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    input_mapping:
      env: source
      config: auth-file
    params:
      OM_TARGET: ((opsman.target))
      OM_SKIP_SSL_VALIDATION: true
- name: configure-director
  serial: true
  plan:
  - aggregate:
    - get: terraform-release
    - get: terraforming-aws
    - get: source
    - get: platform-automation-image
      trigger: true
      passed: [configure-authentication]
      params:
        globs: ['*.tgz']
        unpack: true
    - get: platform-automation-tasks
      params:
        globs: ['*.zip']
        unpack: true
    - get: jq
      params:
        globs: [jq-linux64]
  - task: init-terraform
    image: platform-automation-image
    file: source/ci/tasks/init-terraform.yml
    params:
      TF_VAR_bucket: ((terraform-s3-bucket))
      TF_VAR_region: ((s3-region))
      TF_VAR_key: "((environment))/terraform.tfstate"
      TF_VAR_access_key: ((s3-access-key))
      TF_VAR_secret_key: ((s3-secret-key))
  - task: build-additional-files
    image: platform-automation-image
    file: source/ci/tasks/build-additional-files.yml
    